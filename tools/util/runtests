#!/usr/bin/perl

use warnings;
use strict;

use App::Prove;
use Getopt::Long;

use Cwd;
use File::Spec;
use FindBin;

my $parrotDir = File::Spec->catdir( $FindBin::Bin, (File::Spec->updir) x 2 );
$parrotDir = Cwd::realpath($parrotDir);

my $parrot = File::Spec->catfile($parrotDir, 'parrot');

my $prove = App::Prove->new;
unshift @ARGV, qw(--harness Parrot::TAP::Harness);

$prove->process_args(\@ARGV);

my($run_exec, $running_make_test, $gc_debug, $make_html);
my %options = (
    'running-make-test'  => \$running_make_test,
    'html'               => \$make_html, 
);

GetOptions( \%options,
    'w',        #enable warnings
    'g',        #run CGoto
    'j',        #run JIT
    'C',        #run Switched
    'S',        #run bounds checked
    'f',        #run fast core
    'v',        #run verbose
    'd',        #run debug
    'r',        #assemble to PBC and run the PBC
    'gc-debug', #run with GC debugger
    'O=i',      #optimize, with level
    'D=i',      #Debug flags for parrot
    'RT1',      #Print out the name of the directory that you are in and die.
);

if ($options{RT1}) {
    die "Your parrot directory is: ".$parrotDir."\n";
}

$prove->{argv} = \@ARGV;

# add -D40;  merge it with any existing -D argument
$options{D} = sprintf( '%x', hex(40) | (defined $options{D} ? hex($options{D}) : 0)) if exists $options{D};

delete $options{'running-make-test'};
delete $options{'html'};

my @args = ();

##Short options with flags
foreach my $flag (qw/O D/) {
    if (defined $options{$flag}) {
        push @args, "-".$flag.$options{$flag};
        delete $options{$flag};
    }
}

##Long options
foreach my $flag (qw/gc-debug/) {
    if (defined $options{$flag}) {
        push @args, '--'.$flag;
        delete $options{$flag};
    }
}

##Create argument for both the harness, and the environment

push @args, map { '-'.$_ } keys %options;
my $args = join(' ', @args);

$ENV{TEST_PROG_ARGS} = $args;
$ENV{RUNNING_MAKE_TEST} = $running_make_test if defined $running_make_test;

$prove->run;

# We build-in the harness so we don't have to look for it.  Feel free to
# put it in a .pm file and figure out where it is relative to $0.
BEGIN {
  package Parrot::TAP::Harness;

  use base 'TAP::Harness';
  use constant auto_inherit => 1;

  my $parrot = './parrot'; # TODO pick a parrot

  # This gets called just before running each test.  The return value
  # gets handed to a TAP::Parser->new().  Private -- yeah...whatever.
  sub _get_parser_args {
    my ( $self, $test ) = @_;
    
    open(my $fh, '<', $test) or die "cannot read '$test' to test shebang: $!";
    chomp(my $shebang = <$fh>);
    $shebang =~ s/^#!\s*//;
    my @shparts = split(/\s+/, $shebang);

    my $args = $self->SUPER::_get_parser_args($test);

    unless($shparts[0] eq 'perl') {
      warn "shebang @shparts\n";
      # the compiler is either a pbc (currently with or without the .pbc)
      # or just parrot -- straight pir
      my $compiler = shift(@shparts);
      if($compiler !~ m#(?:.*/)?parrot#) {
        $compiler =~ s/(?:\.pbc)?$/.pbc/;
        unshift(@shparts, $compiler);
      }
      unshift(@shparts, @args);  ##Add in the arguments for deliberate execution

      # warn "shebang @shparts";
      # TODO interpreter-specific and/or parrot specific options
      $args->{exec} = [$parrot, @shparts, $test];
      delete($args->{source});
    }

    return($args);
  }
  $INC{'Parrot/TAP/Harness.pm'} = __FILE__; # make require() happy
} # end Parrot::TAP::Harness
########################################################################

__END__

=head1 NAME

runtests - Run parrot tests via TAP::Harness 3.0.

=head1 USAGE

 runtests [options] -- [parrot harness options] [files or directories]

Since the runtests and parrot options collide, they should be separated by a bare --,
this will let Getopt::Long do the right thing with both sets, operated on one at a time.

=head1 PARROT SPECIFIC OPTIONS

=over 4

=item C<-w>

Turn warnings on.

=item C<-g>

Run the C<CGoto> core.

=item C<-j>

Run with JIT enabled.

=item C<-C>

Run the C<CGP> core.

=item C<-S>

Run Switched.

=item C<-b>

Run bounds checking enabled.

=item C<-d>

Run with debugging enabled.

=item C<-f>

Run fast core.

=item C<-r>

compile to Parrot bytecode and then run the bytecode.

=item C<-O[012]>

Run optimized to the specified level.

=item C<-D[number]>

Pass the specified debug bits to the parrot interpreter.  Note that 
C<-D40> (fill I, N registers with garbage) is always enabled.  
See 'parrot --help-debug' for available flags.

=item C<RT1>

Print out the current working directory and parent directory.  Useful for debugging
runtests during development.  This option will probably go away after the branch
merge.

=back

There are also long command line options:

=over 4

=item C<--running-make-test>

Some test scripts run more quickly when this is set.

=item C<--gc-debug>

Invoke parrot with '--gc-debug'.

=item C<--html>

Emit a C<smoke.html> file instead of displaying results.  B<Not currently working.>

=back


=head1 NOTES

=head1 SEE ALSO

L<App::Prove>

=cut

# vim:ts=4:sw=4:et:sta
