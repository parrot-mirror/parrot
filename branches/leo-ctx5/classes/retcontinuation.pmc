/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

classes/retcontinuation.pmc - Return Continuation

=head1 DESCRIPTION

C<RetContinuation> extends C<Continuation>.

A return continuation is like a Continuation, only its context isn't marked,
because that's just some previous state of the interpreter.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/method_util.h"


pmclass RetContinuation extends Continuation need_ext {

/*

=item C<void init()>

Initializes the continuation.

=cut

*/

    void init () {
        PMC_cont(SELF) = new_ret_continuation(INTERP);
        PMC_pmc_val(SELF) = NULL;
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<void destroy()>

Destroys the continuation.

=cut

*/

    void destroy () {
        struct Parrot_cont * sub = PMC_cont(SELF);
        if (sub) {
            mem_sys_free(sub);
            PMC_cont(SELF) = NULL;
        }
    }
/*

=item C<PMC* clone>

Return a new Continuation PMC with the context of SELF. Note: the
returned object is not a RetContinuation and creating a real
Continuation invalidates all RetContinuation all the way up the call
chain that is, these can't be recycled, they get persistent until
the GC gets at them.

=cut

*/
    PMC* clone() {
        invalidate_retc_context(INTERP, SELF);
        return SUPER();
    }
/*

=item C<void *invoke(void *next)>

Restores the "context" by calling the superclass's C<invoke()> and places
the frame pointer in the stack frame cache.

=cut

*/

    void* invoke (void* next) {
        Stack_Chunk_t *ctr_stack, *stack_now;
        struct Parrot_cont * cc = PMC_cont(SELF);
        parrot_context_t ctx;
        /*
         * unwind control stack
         */
        stack_now = CONTEXT(INTERP->ctx)->control_stack;
        ctr_stack = CONTEXT(PMC_cont(SELF)->ctx)->control_stack;
        while (stack_now != ctr_stack) {
            if (!stack_now || !ctr_stack)
                internal_exception(1, "Control stack damaged");
            /*
             * this automagically runs all pushed action
             * handler during pop - see cleanup stuff
             * in stack_pop
             */
            (void)stack_pop(INTERP, &stack_now,
                            NULL, NO_STACK_ENTRY_TYPE);
        }

        /*
         * Continuation.invoke resets the context pointer to
         * it's own context - remember pointer and free the
         * used context memory - that's safe as long as this
         * is a plain return continuation
         */
        ctx = INTERP->ctx;
        next = SUPER(next);
        INTERP->ctx = ctx;
        Parrot_free_context(INTERP, &ctx, 1);
        INTERP->ctx = cc->ctx;
        return next;
    }

}

/*

=back

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
