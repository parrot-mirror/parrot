/*
$Id$
Copyright (C) 2001-2008, The Perl Foundation.

=head1 NAME

src/pmc/mutable.pmc.template - Template for the mutable PMC

=head1 DESCRIPTION

Forwards all but some methods to the held PMC.

=head2 Methods

=cut

*/

#include "parrot/parrot.h"

pmclass Mutable need_ext dynpmc group perl6_group {
    ATTR PMC *value;
    ATTR PMC *properties;
    
    VTABLE void init() {
        /* Initialize with an empty properties hash. */
        STATICSELF.init_pmc(pmc_new(INTERP, enum_class_Hash));
    }

    VTABLE void init_pmc(PMC *properties) {
        PMC *value;

        /* Create underlying structure. */
        PMC_data(SELF) = mem_allocate_zeroed_typed(Parrot_Mutable);

        /* Initialize with an undef PMC and the provided properties hash. */
        value = pmc_new(INTERP, enum_class_Undef);
        SET_ATTR_value(INTERP, SELF, value);
        SET_ATTR_properties(INTERP, SELF, properties);
    }

    VTABLE void mark() {
        PMC *value;
        PMC *properties;
        GET_ATTR_value(INTERP, SELF, value);
        if (value)
            pobject_lives(INTERP, value);
        GET_ATTR_properties(INTERP, SELF, properties);
        if (properties)
            pobject_lives(INTERP, properties);
    }

    VTABLE void destroy() {
        mem_sys_free(PMC_data(SELF));
    }

    VTABLE void assign_pmc(PMC *value) {
        SET_ATTR_value(INTERP, SELF, value);
    }

    VTABLE PMC * get_pmc() {
        PMC * value;
        GET_ATTR_value(INTERP, SELF, value);
        return value;
    }
}
