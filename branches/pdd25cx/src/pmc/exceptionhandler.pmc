/*
Copyright (C) 2001-2008, The Perl Foundation.
$Id$

=head1 NAME

src/pmc/exceptionhandler.pmc - Exception Handler PMC

=head1 DESCRIPTION

When an exception handler is called, the exception object is passed as
C<REG_PMC(interp, 5)>, the original contents of this register is in the
exception object's C<_P5> attribute.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/oplib/ops.h"

pmclass ExceptionHandler extends Continuation need_ext {

/*

=item C<void init()>

Initializes the exception handler.

=cut

*/

    VTABLE void init() {
        PMC_struct_val(SELF) = new_continuation(INTERP, NULL);
        PMC_pmc_val(SELF)    = PMCNULL;

        /* an exception handler has no separate context; it's only a snapshot
         * of an "earlier" context, which is contained in the interpreter's
         * context - the stacks can only be deeper in the interpreter - so no
         * mark of context is needed */
        PObj_active_destroy_SET(SELF);
    }

    /*
     * can't reuse Continuation's destroy yet -
     * RT#46703 fix ref_count handling for exception_handlers first
     *
     * An ExceptionHandler is kind of a limited Continuation
     * (can only call 'up the stack').  Therefore we probably don't
     * have to convert all RetContinuations to real Continuations
     */

    VTABLE void destroy() {
        Parrot_cont * const cc = PMC_cont(SELF);

        if (cc) {
            mem_sys_free(cc);
            PMC_struct_val(SELF) = NULL;
        }
    }

    VTABLE PMC *clone() {
        PMC * const result = SUPER();
        PObj_custom_mark_CLEAR(result);
        return result;
    }

/*

=back

=head2 Methods

=over 4

=cut

*/

/*

=item C<METHOD can_handle(PMC *exception)>

Report whether the exception handler can handle a particular type of exception.

=cut

*/

    METHOD can_handle(PMC *exception) {
        if (exception->vtable->base_type == enum_class_Exception
                || VTABLE_isa(INTERP, exception, CONST_STRING(INTERP, "Exception"))) {
                RETURN(INTVAL 1);
        }

        RETURN(INTVAL 0);
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
