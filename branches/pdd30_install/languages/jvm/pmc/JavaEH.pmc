/*
 * $Id$
 * Copyright (C) 2006-2008, The Perl Foundation.
 */

/* Java Exception Handler PMC */


#include "parrot/extend.h"
#include "tableinfo.h"
#include "structures.h"


pmclass JavaEH dynpmc group jvm {

    /* Instance initialization. We need a custom DOD marking and destroy. */
    void init()
    {
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
    }


    /* Garbage Collection mark routine. */
    void mark()
    {
        /* Tell the GC about stuff we're holding on to. */
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        if (eh->parent)
            pobject_lives(INTERP, (PObj*)eh->parent);
    }


    /* Destructor. */
    void destroy()
    {
        /* Cleanup any memory we're using. */
        if (PMC_struct_val(SELF)) {
            mem_sys_free(PMC_struct_val(SELF));
            PMC_struct_val(SELF) = NULL;
        }
    }


    /* Get try offset. */
    METHOD INTVAL get_try_offset()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->try_offset;
        RETURN(INTVAL result);
    }


    /* Get try length. */
    METHOD INTVAL get_try_length()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->try_length;
        RETURN(INTVAL result);
    }


    /* Get handler offset. */
    METHOD INTVAL get_handler_offset()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->handler_offset;
        RETURN(INTVAL result);
    }


    /* Get handler length. */
    METHOD INTVAL get_handler_length()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->handler_length;
        RETURN(INTVAL result);
    }


    /* Get flags. */
    METHOD INTVAL get_flags()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->flags;
        RETURN(INTVAL result);
    }


    /* Get typed handler's class type. */
    METHOD INTVAL get_class_type()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->class_type;
        RETURN(INTVAL result);
    }


    /* Get typed handler's class ID. */
    METHOD INTVAL get_class_id()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->class_id;
        RETURN(INTVAL result);
    }


    /* Get filter handler's offset. */
    METHOD INTVAL get_filter_offset()
    {
        jvm_eh *eh = (jvm_eh *)PMC_struct_val(SELF);
        INTVAL     result;

        /* Handle cases where we've an invalid PMC. */
        if (!eh)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaEH PMC");

        result = (INTVAL)eh->filter_offset;
        RETURN(INTVAL result);
    }
}


/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
