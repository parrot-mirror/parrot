/*
 * $Id$
 * Copyright (C) 2006-2008, The Perl Foundation.
 */

/* Java TypeRef Metadata PMC */


#include "parrot/extend.h"
#include "tableinfo.h"
#include "structures.h"


pmclass JavaTypeRefMetadata dynpmc group jvm {

    /* Instance initialization. We need a custom DOD marking and destroy. */
    void init()
    {
        PObj_custom_mark_SET(SELF);
        PObj_active_destroy_SET(SELF);
    }


    /* Get string vtable function; returns the name of the referenced type. */
    STRING* get_string()
    {
        jvm_typeref *c = (jvm_typeref *)PMC_struct_val(SELF);

        /* Handle cases where we've an invalid PMC. */
        if (!c || !c->str_name)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaTypeRefMetadata PMC");

        return c->str_name;
    }


    /* Garbage Collection mark routine. */
    void mark()
    {
        /* Tell the GC about stuff we're holding on to. */
        jvm_typeref *c = (jvm_typeref *)PMC_struct_val(SELF);
        if (c) {
            if (c->str_name)
                pobject_lives(INTERP, (PObj*)c->str_name);
            if (c->str_namespace)
                pobject_lives(INTERP, (PObj*)c->str_namespace);
        }
    }


    /* Destructor. */
    void destroy()
    {
        /* Cleanup any memory we're using. */
        if (PMC_struct_val(SELF)) {
            mem_sys_free(PMC_struct_val(SELF));
            PMC_struct_val(SELF) = NULL;
        }
    }


    /* Get the namespace of the referenced type. */
    METHOD STRING* get_namespace()
    {
        jvm_typeref *c = (jvm_typeref *)PMC_struct_val(SELF);
        STRING         *result;

        /* Handle cases where we've an invalid PMC. */
        if (!c)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaTypeRefMetadata PMC");

        result = c->str_namespace;
        RETURN(STRING *result);
    }


    /* Get the resolution scope. */
    METHOD INTVAL get_resolution_scope()
    {
        jvm_typeref *c = (jvm_typeref *)PMC_struct_val(SELF);
        INTVAL          result;

        /* Handle cases where we've an invalid PMC. */
        if (!c)
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
               "Invalid JavaTypeRefMetadata PMC");

        result = c->resolution_scope;
        RETURN(INTVAL result);
    }
}


/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
