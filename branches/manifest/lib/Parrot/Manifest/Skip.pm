# $Id$
package Parrot::Manifest::Skip;
use strict;
use warnings;
use Carp;
use base ('Parrot::Manifest');

sub prepare_manifest_skip {
    my $self = shift;
    my $svnignore = `$self->{cmd} propget svn:ignore @{ $self->{dirs} }`;
    # cope with trailing newlines in svn:ignore output
    $svnignore =~ s/\n{3,}/\n\n/g;
    my %ignore;
    my @ignore = split( /\n\n/, $svnignore );
    foreach (@ignore) {
        my @cnt = m/( - )/g;
        if ($#cnt) {
            my @a = split /\n(?=(?:.*?) - )/, $_;
            foreach (@a) {
                m/^\s*(.*?) - (.+)/sm;
                $ignore{$1} = $2 if $2;
            }
        }
        else {
            m/^(.*) - (.+)/sm;
            $ignore{$1} = $2 if $2;
        }
    }
    $self->{ignore} = \%ignore;
}

sub print_manifest_skip {
    my $self = shift;
    my %ignore = %{ $self->{ignore} };
    open my $MANIFEST_SKIP, '>', 'MANIFEST.SKIP'
        or die "Unable to open MANIFEST.SKIP for writing";
    print $MANIFEST_SKIP <<"END_HEADER";
# ex: set ro:
# $self->{id}
# generated by $self->{script} $self->{time} UT
#
# This file should contain a transcript of the svn:ignore properties
# of the directories in the Parrot subversion repository. (Needed for
# distributions or in general when svn is not available).
# See docs/submissions.pod on how to recreate this file after SVN
# has been told about new generated files.
#
# Ignore the SVN directories
\\B\\.svn\\b

# debian/ should not go into release tarballs
^debian\$
^debian/
END_HEADER

    foreach my $directory ( sort keys %ignore ) {
        my $dir = $directory;
        $dir =~ s!\\!/!g;
        print $MANIFEST_SKIP "# generated from svn:ignore of '$dir/'\n";
        foreach ( sort split /\n/, $ignore{$directory} ) {
            s/\./\\./g;
            s/\*/.*/g;
            print $MANIFEST_SKIP $dir ne '.'
                ? "^$dir/$_\$\n^$dir/$_/\n"
                : "^$_\$\n^$_/\n";
        }
    }
    close $MANIFEST_SKIP
        or die "Unable to close MANIFEST.SKIP after writing";
    return 1;
}

sub get_current_skips {
    my %current_skips = ();
    open my $SKIP, "<", 'MANIFEST.SKIP'
        or die "Unable to open MANIFEST.SKIP for reading";
    while (my $line = <$SKIP>) {
        chomp $line;
        next if $line =~ /^\s*$/o;
        next if $line =~ /^#/o;
        $current_skips{$line}++;
    }
    close $SKIP or die "Unable to close MANIFEST.SKIP after reading";
    return \%current_skips;
}

1;

##### DOCUMENTATION #####

=head1 NAME

Parrot::Manifest::Skip - Create MANIFEST.SKIP

=head1 AUTHOR

James E. Keenan (jkeenan@cpan.org) refactored code from earlier versions of
F<tools/dev/mk_manifest_and_skip.pl>.

=head1 LICENSE

This is free software which you may distribute under the same terms as Perl
itself.

=cut
