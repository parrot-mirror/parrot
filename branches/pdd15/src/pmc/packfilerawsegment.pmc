/*
Copyright (C) 2006, The Perl Foundation.
$Id: $

=head1 NAME

src/pmc/packfilerawsegment.pmc - Packfile Segment For Raw Access

=head1 DESCRIPTION

Holds and allows manipulatin of a Packfile segment at the word level.

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"

/* Data used:
 *   PMC_struct_val ... PackFile_ConstTable
 */
pmclass PackfileRawSegment inherits PackfileSegment {
    
/*

=item C<STRING* pack()>

Packs this segment into a binary representation. Returns NULL on failure.

=cut

*/
    METHOD STRING* pack()
    {
        struct Parrot_PackFile_Segment *seg = (struct Parrot_PackFile_Segment*)PMC_struct_val(SELF);
        size_t length;
        STRING* result;
        opcode_t* image;
        
        /* Compute the length. */
        length = seg->size;

        /* Make a string of the right length and pack into it. */
        result = string_make_empty(INTERP, enum_stringrep_one, 1 + length * sizeof(opcode_t));
        image = result->strstart;
        image = PF_store_opcode(image, 1 + length); /* Segment length. */
        memcpy(image, seg->data, seg->size * sizeof(opcode_t));

        /* Return resultant string. */
        return result;
    }

/*

=item C<int unpack(STRING* image)>

Unpacks the given binary representation of the segment and sets this PMC to
hold it. Returns a non-zero value on success.

=cut

*/
    METHOD int unpack(STRING* image)
    {
        struct Parrot_PackFile_Segment *seg = (struct Parrot_PackFile_Segment*)PMC_struct_val(SELF);
        opcode_t* packed;
        int length;

        /* Get at the underlying string data. */
        packed = (opcode_t*)image->strstart;

        /* Skip over the length. XXX check */
        packed++;

        /* Do the unpack. */
        if (seg->data)
            free(seg->data);
        length = string_length(INTERP, image) - sizeof(opcode_t);
        seg->data = mem_sys_allocate(length);
        memcpy(seg->data, packed, length);
        
        return 1;
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
