# $Id$

# Makefile for languages/cola

## configuration settings
HLLNAME       = cola
BUILD_DIR     = @build_dir@
O             = @o@
EXE           = @exe@
BIN_DIR       = @bin_dir@
LIB_DIR       = @lib_dir@
DOC_DIR       = @doc_dir@
MANDIR	      = @mandir@

# Set up commands
PERL          = @perl@
RM_F          = @rm_f@
CHMOD         = @chmod@
CP            = @cp@
MKPATH        = @mkpath@
CC            = @cc@
DEBUG         = @cc_debug@
YACC          = @yacc@
LEX           = @lex@
RECONFIGURE   = $(PERL) @build_dir@/tools/dev/reconfigure.pl
POD2MAN	      = @
#CONDITIONED_LINE(darwin):
#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

# Libraries:  Ordinarily, no special libraries are needed
# for cola, but one of the following settings might be helpful
# in some cases.
# Use the same libraries as Parrot:
# LIBS = @libs@
# You might need these for some versions of flex and/or yacc:
# LIBS = -ll -ly
# Ordinarily, no special libraries are needed for cola.
LIBS    =

# These manual settings might be helpful in some situations.
# Visual C++
# CC = cl
#
# GCC
# CC = gcc -Wall -pedantic
#
# GCC with Electric Fence
# CC = gcc -efence -Wall -pedantic
# LIBS = -lefence

HEADERS = cola.h parser.h
DOCS = MAINTAINER README examples/*

all : colacc$(EXE)
	$(MAKE) colacc$(EXE)
	-$(CHMOD) 775 colacc$(EXE)

help :
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all  :             build 'colacc'"
	@echo "                     This is the default."
	@echo "  installable:       Create self-hosting bins and libs."
	@echo "  install:           Install the installable targets and docs."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite"
	@echo "  test-installable:  Test self-hosting targets."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Clean up temporary files"
	@echo "  realclean:         Clean up generated files"
	@echo "  superclean:        Clean up generated files, also the flex/bison files"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message"
	@echo ""

# regenerate the Makefile
Makefile: config/makefiles/root.in
	cd $(BUILD_DIR) && $(RECONFIGURE) --step=gen::languages --languages=$(HLLNAME)

nogen : gen$(O) semant$(O) sym$(O) type$(O)
	$(CC) $(DEBUG) -c parser.c
	$(CC) $(DEBUG) -c lexer.c
	$(CC) $(DEBUG) -o colacc$(EXE) parser$(O) lexer$(O) gen$(O) semant$(O) sym$(O) type$(O) $(LIBS)

clean :
	$(RM_F) \
  core \
  "*.obj" "*.pdb" "*.ilk" \
  "*$(O)" \
  parser.output \
  colacc$(EXE) \
  a.pir a.pbc a.pasm

realclean: clean
	$(RM_F) Makefile

# Don't run this target unless you have bison and flex installed.
# These programs are needed for regenerating the removed files.
superclean: realclean
	$(RM_F) parser.h
	$(RM_F) lexer.c parser.c

#publish :
#	$(PERL) publish.pl < MANIFEST
#
#dist :
#	$(PERL) distribution.pl < MANIFEST

parser.c : cola.y
	$(YACC) -d -o parser.c cola.y

lexer.c : cola.l $(HEADERS)
	$(LEX) cola.l

lexer$(O) : lexer.c $(HEADERS)
	$(CC) $(DEBUG) -c lexer.c

parser$(O) : parser.c $(HEADERS)
	$(CC) $(DEBUG) -c parser.c

semant$(O) : semant.c $(HEADERS)
	$(CC) $(DEBUG) -c semant.c

sym$(O) : sym.c $(HEADERS)
	$(CC) $(DEBUG) -c sym.c

type$(O) : type.c $(HEADERS)
	$(CC) $(DEBUG) -c type.c

gen$(O) : gen.c $(HEADERS)
	$(CC) $(DEBUG) -c gen.c

colacc$(EXE) : parser$(O) lexer$(O) gen$(O) semant$(O) sym$(O) type$(O)
	$(CC) $(DEBUG) -o colacc$(EXE) parser$(O) lexer$(O) gen$(O) semant$(O) sym$(O) type$(O) $(LIBS)

test: default
	cd .. && $(PERL) t/harness --languages=$(HLLNAME)

# TODO: rename build_dir. basic run for missing libs
test-installable : installable
	./colacc$(EXE) examples/fib.cola

install : installable
	$(CP) colacc$(EXE) $(DESTDIR)$(BIN_DIR)/parrot-colacc$(EXE)
	ascii2man README > $(DESTDIR)$(MANDIR)/man1/parrot-colacc.1
	$(MKPATH) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)
	$(CP) $(DOCS) $(DESTDIR)$(DOC_DIR)/languages/$(HLLNAME)

installable : colacc$(EXE)
	$(CP) colacc$(EXE) $(BUILD_DIR)/installable_colacc$(EXE)

#
# Local variables:
# mode: makefile
# ex: ft=make
# End:
