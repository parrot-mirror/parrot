The goal of tcl in this branch is to experiment with the use of PCT
instead of simply using PGE and a bunch of handrolled code.

ROADMAP, roughly in order.

* Implement a fair number of builtins from main:: as if they were
  actual language syntax (even though they're not.) puts, if,
  while, proc, return, etc.

* Provide a default command syntax that does a dispatch similar
  to what tcl in trunk does now.

* Support rename by moving the builtin functionality supported
  by PCT into a sub invokable by the default command rule, and
  update the grammar to delete the definition of the original
  builtin.

* Procs will have to keep track of their epoch still; if they
  are out of date, they will have to recompile their body if they
  are reinvoked.  This means they'll have to keep their HLL source
  around.

Other misc items:

* Allow parsing of a program a statement
  at a time, rather than the current default "do everything"

* When possible, we'll start importing test files from trunk.

* Benchmark the PCT version against the handrolled version.

* Compare the code required in each case. Which is more complex?

Remember, a lot of work is already done in trunk. Don't re-invent
something if we can just steal it from trunk.
