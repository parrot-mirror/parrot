/*
$Id$
Copyright (C) 2001-2008, The Perl Foundation.

=head1 NAME

src/pmc/mutable_pmc.template - Template for the mutable PMC

=head1 DESCRIPTION

Forwards all but some methods to the held PMC.

=head2 Methods

=cut

*/

#include "parrot/parrot.h"

pmclass Mutable need_ext dynpmc group perl6_group {
    ATTR PMC *value;
    ATTR PMC *properties;
    ATTR PMC *cached_type;
    
    VTABLE void init() {
        /* Initialize with a null PMC for properties. */
        STATICSELF.init_pmc(PMCNULL);
    }

    VTABLE void init_pmc(PMC *properties) {
        PMC *value;
        PMC *type_obj = PMCNULL;
        STRING *type = string_from_literal(INTERP, "!type");
        /* XXX Why doesn't CONST_STRING work on above line? */

        /* Create underlying structure. */
        PMC_data(SELF) = mem_allocate_zeroed_typed(Parrot_Mutable);

        /* Initialize with an undef PMC and the provided properties hash. */
        SET_ATTR_properties(INTERP, SELF, properties);

        /* If the properties hash contains a type then cache it. */
        if (!PMC_IS_NULL(properties) && VTABLE_exists_keyed_str(INTERP, properties, type)) {
            type_obj = VTABLE_get_pmc_keyed_str(INTERP, properties, type);
            SET_ATTR_cached_type(INTERP, SELF, type_obj);
        }

        /* Initial value should be proto-object if it's a class type, or
         * an undef otherwise. */
        if (!PMC_IS_NULL(type_obj) && VTABLE_isa(INTERP, type_obj, string_from_literal(INTERP, "P6protoobject")))
            value = type_obj;
        else
            value = pmc_new(INTERP, enum_class_Undef);
        SET_ATTR_value(INTERP, SELF, value);
    }

    VTABLE void mark() {
        PMC *value;
        PMC *properties;
        GET_ATTR_value(INTERP, SELF, value);
        if (value)
            pobject_lives(INTERP, (PObj*)value);
        GET_ATTR_properties(INTERP, SELF, properties);
        if (properties)
            pobject_lives(INTERP, (PObj*)properties);
    }

    VTABLE void destroy() {
        mem_sys_free(PMC_data(SELF));
    }

    VTABLE void assign_pmc(PMC *value) {
        /* Do we need to do any type-check? */
        PMC *type_obj;
        GET_ATTR_cached_type(INTERP, SELF, type_obj);
        if (!PMC_IS_NULL(type_obj)) {
            STRING *checker_name = string_from_literal(INTERP, "!DOTYEPCHECK");
            PMC *checker = Parrot_find_global_n(interp,
                Parrot_get_ctx_HLL_namespace(interp), checker_name);
            PMC *result = pmc_new(INTERP, enum_class_Integer);
            Parrot_runops_fromc_args(INTERP, checker, "vPPP", type_obj, value, result);
            if (!VTABLE_get_integer(INTERP, result))
                real_exception(interp, NULL, INVALID_OPERATION, "Type check failed");
        }

        /* Stash the value. */
        SET_ATTR_value(INTERP, SELF, value);
    }

    VTABLE PMC * get_pmc() {
        PMC * value;
        GET_ATTR_value(INTERP, SELF, value);
        return value;
    }
}
