/*
Copyright (C) 2006, The Perl Foundation.
$Id: $

=head1 NAME

src/pmc/packfiledirectory.pmc - Packfile Directory

=head1 DESCRIPTION

Holds and allows manipulation of a Packfile directory.

=head2 Functions

=over 4

=cut

*/

#include "parrot/parrot.h"

/* Data used:
 *   PMC_struct_val ... Parrot_PackFile_Directory
 */
pmclass PackfileDirectory inherits PackfileSegment {
    
/*

=item C<void init()>

Initializes the packfile

=cut

*/
    void init() {
        /* Create and set up the directory structure. */
        struct Parrot_PackFile_Directory* dir =
            mem_sys_allocate_zeroed(sizeof(struct Parrot_PackFile_Directory*));
        if (!dir) {
            PIO_eprintf(NULL, "PackFileDirectory_new: Unable to allocate!\n");
            return;
        }
        PMC_struct_val(SELF) = dir;
        
        /* Parent is NULL to start off with and allocate a new array of
         * segments. */
        dir->parent = NULL;
        dir->segments = pmc_new(interpreter, enum_class_ResizablePMCArray);

        /* Need custom mark/destroy. */
        PObj_custom_mark_destroy_SETALL(SELF);
    }

/*

=item C<void destroy()>

Destroys the packfile.

=cut

*/
    void destroy () {
        struct Parrot_PackFile_Directory *dir = 
            (struct Parrot_PackFile_Directory*)PMC_struct_val(SELF);
        if (dir) {
            mem_sys_free(dir);
        }
    }

/*
=item C<void mark()>

Marks the packfile for GC purposes.

=cut

*/
    void mark () {
        struct Parrot_PackFile_Directory *dir = 
            (struct Parrot_PackFile_Directory*)PMC_struct_val(SELF);
        if (dir) {
            if (dir->parent)
                pobject_lives(interpreter, (PObj*)dir->parent);
            if (dir->segments)
                pobject_lives(interpreter, (PObj*)dir->segments);
        }
    }

/*
=item C<INTVAL elements()>

Gets the number of segments that the directory knows about.

=cut

*/
    INTVAL elements() {
        struct Parrot_PackFile_Directory *dir = 
            (struct Parrot_PackFile_Directory*)PMC_struct_val(SELF);
        return VTABLE_elements(INTERP, dir->segments);
    }

/*

=item C<STRING* pack()>

Packs this segment into a binary representation. Returns NULL on failure.

=cut

*/
    METHOD STRING* pack()
    {
        return NULL;
    }

/*

=item C<int unpack(STRING* image)>

Unpacks the given binary representation of the segment and sets this PMC to
hold it. Returns a non-zero value on success.

=cut

*/
    METHOD int unpack(STRING* image)
    {
        return 0;
    }

}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
