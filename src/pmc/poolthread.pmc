/*
Copyright (C) 2010, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/poolthread.pmc - Represents a native thread for an interpreter thread pool.

=head1 DESCRIPTION

This OS thread will hang out in the interpreter thread pool, mostly blocked on a
per-interpreter mutex or - if it's lucky - on IO.

=head2 Methods

=over 4

=cut
*/

#include "parrot/parrot.h"
#include "parrot/thread.h"

void* Parrot_PoolThread_main(void* arg);

typedef struct Parrot_PoolThread_args {
    PMC    *pool_thread;
    Interp *interp; 
} Parrot_PoolThread_args;

pmclass PoolThread auto_attrs {
    ATTR Parrot_thread thread;
    ATTR void         *args;

    /*
    =item C<void init()>

    Create a new OS thread.
    
    =cut
    */

    VTABLE void init() {
        Parrot_PoolThread_attributes *tdata = PARROT_POOLTHREAD(SELF);
        Parrot_PoolThread_args       *args  =
            (Parrot_PoolThread_args*) malloc(sizeof(Parrot_PoolThread_args));

        PObj_custom_destroy_SET(SELF);

        tdata->args = (void*) args;
        THREAD_CREATE_JOINABLE(tdata->thread, Parrot_PoolThread_main, tdata->args);
    }

    VTABLE void destroy() {
        Parrot_PoolThread_attributes *tdata = PARROT_POOLTHREAD(SELF);
        free(tdata->args);
    }
}

void*
Parrot_PoolThread_main(void* args_ptr)
{
    Parrot_PoolThread_args *args = (Parrot_PoolThread_args*) args_ptr;
    Interp* interp = args->interp;

    LOCK(interp->interp_lock);


    UNLOCK(interp->interp_lock);

    return 0;
}

/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
