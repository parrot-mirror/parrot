
#include "parrot/alarm.h"

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* Don't modify between HEADERIZER BEGIN / HEADERIZER END.  Your changes will be lost. */

/* blah */

/* HEADERIZER END: static */

pmclass AlarmTest auto_attrs {
    ATTR INTVAL id;
    ATTR INTVAL n;
    ATTR FLOATVAL set;

    VTABLE void init() {
        fprintf(stderr, "Made an AlarmTest\n");
    }

    VTABLE STRING *get_string() {
        char blah[] = "blah";
        return Parrot_str_new(interp, blah, strlen(blah));
    }

    METHOD wonk() {
        fprintf(stderr, "Wonk\n");
    }

    METHOD set_alarm(FLOATVAL t) {
        FLOATVAL now, when;
        Parrot_AlarmTest_attributes* attrs;

        now  = Parrot_floatval_time();
        when = now + t;
        Parrot_alarm_set(when);

        attrs = PMC_data_typed(SELF, Parrot_AlarmTest_attributes *);
        attrs->set = when;

        fprintf(stderr, "At %.06lf set alarm for %.06lf\n", now, when);
    }

    METHOD check_alarm() {
        FLOATVAL now;
        Parrot_AlarmTest_attributes* attrs;
        INTVAL changed = 0;

        attrs = PMC_data_typed(SELF, Parrot_AlarmTest_attributes *);

        if(Parrot_alarm_check(&(attrs->n))) {
            now = Parrot_floatval_time();

            fprintf(stderr, "At %.06lf maybe alarm.\n", now);

            if(now > attrs->set)
                changed = 1;
        }

        RETURN(INTVAL changed);
    }
}
