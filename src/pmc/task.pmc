/*
Copyright (C) 2001-2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/task.pmc - A concurrent task

=head1 DESCRIPTION

The Task PMC represents a concurrent running "green thread".

=head2 Functions

=over 4

=cut

*/

#include "parrot/scheduler_private.h"

/* HEADERIZER HFILE: none */
/* HEADERIZER BEGIN: static */
/* HEADERIZER END: static */

pmclass Task provides invokable auto_attrs {
    ATTR FLOATVAL      birthtime; /* The creation time stamp of the task. */
    ATTR Parrot_Interp interp;    /* The interpreter that created the task. */
    ATTR PMC          *code;      /* An (optional) code for the task. */
    ATTR PMC          *data;      /* Additional data for the task. */

/*

=item C<void init()>

Initialize a concurrency task object.

=cut

*/

    VTABLE void init() {
        Parrot_Task_attributes * const core_struct = PARROT_TASK(SELF);

        /* Set flags for custom GC mark. */
        PObj_custom_mark_SET(SELF);

        /* Set up the core struct. */
        core_struct->birthtime = Parrot_floatval_time();
        core_struct->code      = PMCNULL;
        core_struct->data      = PMCNULL;
        core_struct->interp    = INTERP;
    }

/*

=item C<void init_pmc(PMC *data)>

Initializes a new Task with a C<Hash> PMC with any or all of the keys:

=over 4

=item C<birthtime>

The time at which this Task was created.

=item C<code>

An C<invokable> PMC related to this task.

=item C<data>

Some data that will be passed to C<code> when invoked.

=item C<interp>

An interpreter in which to execute this task.

=back

=cut

*/

    VTABLE void init_pmc(PMC *data) {
        PMC         *elem;
        Parrot_Task_attributes *core_struct;

        if (! VTABLE_isa(INTERP, data, CONST_STRING(INTERP, "Hash")))
            Parrot_ex_throw_from_c_args(INTERP, NULL, EXCEPTION_INVALID_OPERATION,
                "Task initializer must be a Hash");

        SELF.init();

        core_struct = (Parrot_Task_attributes *) PMC_data(SELF);

        elem = VTABLE_get_pmc_keyed_str(INTERP, data, CONST_STRING(INTERP, "birthtime"));
        if (! PMC_IS_NULL(elem))
            core_struct->birthtime = VTABLE_get_number(INTERP, elem);

        elem = VTABLE_get_pmc_keyed_str(INTERP, data, CONST_STRING(INTERP, "code"));
        if (! PMC_IS_NULL(elem))
            core_struct->code = elem;

        elem = VTABLE_get_pmc_keyed_str(INTERP, data, CONST_STRING(INTERP, "data"));
        if (! PMC_IS_NULL(elem))
            core_struct->data = elem;

        elem = VTABLE_get_pmc_keyed_str(INTERP, data, CONST_STRING(INTERP, "interp"));
        if (! PMC_IS_NULL(elem))
            core_struct->interp = elem;
    }

/*

=item C<opcode_t *invoke(void *next)>

Invokes whatever is in the Task's associated code.

If the Task's data attribute is not null, pass it to the
code as the first argument.

=cut

*/

    VTABLE opcode_t *invoke(void *next) {
        Parrot_Task_attributes *const task = PARROT_TASK(SELF);

        if (PMC_IS_NULL(task->code))
            return (opcode_t*) next;

        if (PMC_IS_NULL(task->data)) {
            Parrot_pcc_invoke_sub_from_c_args(interp, task->code, "->");
        }
        else {
            Parrot_pcc_invoke_sub_from_c_args(interp, task->code, "P->", task->data);
        }

        return (opcode_t*) next;
    }


/*

=item C<PMC *clone()>

Create a copy of the task, resetting status, ID, and birthtime.

=cut

*/

    VTABLE PMC *clone() {
        /* Create the new task PMC, of the same type of this one (we may
         * have been subclassed). */
        PMC * const copy  = Parrot_pmc_new(INTERP, SELF->vtable->base_type);
        Parrot_Task_attributes * const new_struct = PARROT_TASK(copy);
        Parrot_Task_attributes * const old_struct = PARROT_TASK(SELF);

        new_struct->code = VTABLE_clone(INTERP, old_struct->code);
        new_struct->data = VTABLE_clone(INTERP, old_struct->data);

        return copy;
    }

/*

=item C<PMC *get_attr_str(STRING *name)>

Gets the value of an attribute for this task.

=cut

*/
    VTABLE PMC *get_attr_str(STRING *name) {
        Parrot_Task_attributes * const core_struct = PARROT_TASK(SELF);
        PMC *value;

        if (Parrot_str_equal(INTERP, name, CONST_STRING(INTERP, "birthtime"))) {
            value = Parrot_pmc_new(INTERP, enum_class_Float);
            VTABLE_set_number_native(INTERP, value, core_struct->birthtime);
        }
        else if (Parrot_str_equal(INTERP, name, CONST_STRING(INTERP, "code"))) {
            value = core_struct->code;
        }
        else if (Parrot_str_equal(INTERP, name, CONST_STRING(INTERP, "data"))) {
            value = core_struct->data;
        }
        else {
            value = PMCNULL;
        }

        return value;
    }

/*

=item C<void set_attr_str(STRING *name, PMC *value)>

Sets the value of an attribute for this task.

=cut

*/

    VTABLE void set_attr_str(STRING *name, PMC *value) {
        Parrot_Task_attributes * const core_struct = PARROT_TASK(SELF);

        if (Parrot_str_equal(INTERP, name, CONST_STRING(INTERP, "birthtime"))) {
            core_struct->birthtime = VTABLE_get_number(INTERP, value);
        }
        else if (Parrot_str_equal(INTERP, name, CONST_STRING(INTERP, "code"))) {
            core_struct->code = value;
        }
        else if (Parrot_str_equal(INTERP, name, CONST_STRING(INTERP, "data"))) {
            core_struct->data = value;
        }
    }

/*

=item C<PMC *share_ro()>

Set this PMC as shared.

=cut

*/

    VTABLE PMC *share_ro() {
        PMC *shared_self;
        Parrot_Task_attributes *shared_struct;

        if (PObj_is_PMC_shared_TEST(SELF))
            return SELF;

        shared_self = pt_shared_fixup(INTERP, SELF);
        shared_struct = PARROT_TASK(shared_self);

        if (!PMC_IS_NULL(shared_struct->code))
            shared_struct->code = pt_shared_fixup(INTERP, shared_struct->code);

        if (!PMC_IS_NULL(shared_struct->data))
            shared_struct->data = pt_shared_fixup(INTERP, shared_struct->data);

        return shared_self;
    }

/*

=item C<void mark()>

Mark any referenced strings and PMCs.

=cut

*/
    VTABLE void mark() {
        if (PARROT_TASK(SELF)) {
            Parrot_Task_attributes * const core_struct = PARROT_TASK(SELF);

            Parrot_gc_mark_PMC_alive(INTERP, core_struct->code);
            Parrot_gc_mark_PMC_alive(INTERP, core_struct->data);
        }
    }

/*

=item C<void visit(PMC *info)>

This is used by freeze/thaw to visit the contents of the task.

C<*info> is the visit info, (see F<include/parrot/pmc_freeze.h>).

=cut

*/

    VTABLE void visit(PMC *info) {
        /* 1) visit code block */
        VISIT_PMC_ATTR(INTERP, info, SELF, Task, code);
        VISIT_PMC_ATTR(INTERP, info, SELF, Task, data);
    }

/*

=item C<void freeze(PMC *info)>

Used to archive the task.

=cut

*/

    VTABLE void freeze(PMC *info) {
        const Parrot_Task_attributes * const core_struct = PARROT_TASK(SELF);

        VTABLE_push_float(INTERP, info, core_struct->birthtime);
    }

/*

=item C<void thaw(PMC *info)>

Used to unarchive the task.

=cut

*/

    VTABLE void thaw(PMC *info) {
        const FLOATVAL birthtime = VTABLE_shift_float(INTERP, info);

        /* Allocate the task's core data struct and set custom flags. */
        SELF.init();

        /* Set the task's birthtime to the frozen birthtime */
        PARROT_TASK(SELF)->birthtime = birthtime;
    }

/*

=item C<void thawfinish(PMC *info)>

Called after the task has been thawed.

=cut

*/

    VTABLE void thawfinish(PMC *info) {
        Parrot_Task_attributes * core_struct = PARROT_TASK(SELF);

        UNUSED(core_struct); /* Do nothing */
    }

}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd15_objects.pod>.

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
