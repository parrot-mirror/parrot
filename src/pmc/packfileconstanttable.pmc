/*
Copyright (C) 2001-2008, Parrot Foundation.
$Id$

=head1 NAME

src/pmc/packfileconstanttable.pmc - PackfileConstantTable PMC

=head1 DESCRIPTION

This class implements a PackfileConstantTable object, a segment of the .pbc
data file used for storing constants of various types.  (int, string, PMC)

See packfile.pmc for the toplevel Packfile interface, see packfilesegment.pmc
for the list of common methods every packfile segment pmc must implement; see
PDD13 for the design spec.


=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

static PackFile_Constant *
getconst(PARROT_INTERP, PackFile_ConstTable *table, int index, int type)
{
    PackFile_Constant *rv;
    if (index < 0 || index >= table->const_count)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_OUT_OF_BOUNDS,
                "Requested data out of range.");
    rv = table->constants[index];
    if (rv->type != type)
        Parrot_ex_throw_from_c_args(interp, NULL, EXCEPTION_INVALID_OPERATION,
                "Requested constant of the wrong type.");
    return rv;
}

/*
 * Extend constant table if required
 * 
 * Implementation details: very similar to imcc/pbc.c. We need refactor
 * it to common subroutine.
 */
static PackFile_Constant *
vivify(PARROT_INTERP, PackFile_ConstTable *table, int index)
{
    const size_t    old_count = table->const_count;
    const size_t    new_count = index+1;
    size_t          i;

    if (index >= table->const_count) {
        /* Update the constant count and reallocate */
        if (table->constants)
            table->constants = mem_realloc_n_typed(table->constants, new_count,
                PackFile_Constant *);
        else
            table->constants =
                mem_allocate_n_typed(new_count, PackFile_Constant *);

        for (i=old_count; i<new_count; ++i) {
            table->constants[i] = PackFile_Constant_new(interp);
        }

        /* Store new size */
        table->const_count = new_count;
    }

    return table->constants[index];
}


pmclass PackfileConstantTable extends PackfileSegment {
    /* ResizablePMCArray for storing constants */
    ATTR PMC *constants;

    /* ResizablePMCArray for storing constant types */
    ATTR PMC *types;

/*

=item C<init>

Create empty PackfileConstantTable.

=cut

*/

    VTABLE void init() {
        Parrot_PackfileConstantTable_attributes * attrs =
                mem_allocate_zeroed_typed(Parrot_PackfileConstantTable_attributes);

        attrs->constants        = pmc_new(interp, enum_class_ResizablePMCArray);
        attrs->types   = pmc_new(interp,
                enum_class_ResizableIntegerArray);

        PObj_custom_mark_destroy_SETALL(SELF);
        PMC_data(SELF) = attrs;
    }

/*

=item C<void mark()>

Marks the object as live. 

=cut

*/

    VTABLE void mark() {
        Parrot_PackfileConstantTable_attributes * attrs =
                PARROT_PACKFILECONSTANTTABLE(SELF);

        if (attrs->constants)
            pobject_lives(interp, (PObj *)attrs->constants);
        if (attrs->types)
            pobject_lives(interp, (PObj *)attrs->types);
    }

/*

=item C<void destroy()>

Destroys the PMC and frees all allocated memory.

=cut

*/

    VTABLE void destroy() {
        Parrot_PackfileConstantTable_attributes * attrs =
                PARROT_PACKFILECONSTANTTABLE(SELF);

        if (attrs) {
            mem_sys_free(attrs);
            PMC_data(SELF) = NULL;
        }
    }



/*

=item C<set_pointer>

Set pointer to underlying PackFile_ConstTable

=cut

*/

    VTABLE void set_pointer(void * pointer) {
    }

/*

=item C<INTVAL elements()>

Get the number of elements in the array.

=cut

*/
    VTABLE INTVAL elements() {
        return VTABLE_elements(interp,
                PARROT_PACKFILECONSTANTTABLE(SELF)->constants);
    }


/*

=item C<FLOATVAL get_number_keyed_int(INTVAL index)>

Fetch a numeric constant.  An exception is thrown if the given constant isn't
numeric.

=cut

*/
    VTABLE FLOATVAL get_number_keyed_int(INTVAL index)  {
        return VTABLE_get_number_keyed_int(interp,
                PARROT_PACKFILECONSTANTTABLE(SELF)->constants, index);
    }


/*

=item C<STRING *get_string_keyed_int(INTVAL index)>

Fetch a string constant.  An exception is thrown if the given constant isn't
a string.

=cut

*/
    VTABLE STRING *get_string_keyed_int(INTVAL index)  {
        return VTABLE_get_string_keyed_int(interp,
                PARROT_PACKFILECONSTANTTABLE(SELF)->constants, index);
    }


/*

=item C<PMC *get_pmc_keyed_int(INTVAL index)>

Fetch a PMC constant.  An exception is thrown if the given constant isn't a PMC.

=cut

*/
    VTABLE PMC *get_pmc_keyed_int(INTVAL index)  {
        return VTABLE_get_pmc_keyed_int(interp,
                PARROT_PACKFILECONSTANTTABLE(SELF)->constants, index);
    }


/*

=item C<void set_number_keyed_int(INTVAL index, INTVAL value)>

Set the constant to the given number.

=cut

*/
    VTABLE void set_number_keyed_int(INTVAL index, FLOATVAL value)  {
        Parrot_PackfileConstantTable_attributes * attrs =
                PARROT_PACKFILECONSTANTTABLE(SELF);
        
        VTABLE_set_number_keyed_int(interp, attrs->constants, index, value);
        VTABLE_set_integer_keyed_int(interp, attrs->types, index, PFC_NUMBER);
    }


/*

=item C<void set_string_keyed_int(INTVAL index, STRING *value)>

Set the constant to the given string.

=cut

*/

    VTABLE void set_string_keyed_int(INTVAL index, STRING *value)  {
        Parrot_PackfileConstantTable_attributes * attrs =
                PARROT_PACKFILECONSTANTTABLE(SELF);

        VTABLE_set_string_keyed_int(interp, attrs->constants, index, value);
        VTABLE_set_integer_keyed_int(interp, attrs->types, index, PFC_STRING);
    }


/*

=item C<void set_pmc_keyed_int(INTVAL index, PMC *value)>

Set the constant to the given PMC (or key).

=cut

TODO: Distinguish between Key and other PMCs.

*/
    VTABLE void set_pmc_keyed_int(INTVAL index, PMC *value)  {
        Parrot_PackfileConstantTable_attributes * attrs =
                PARROT_PACKFILECONSTANTTABLE(SELF);

        VTABLE_set_pmc_keyed_int(interp, attrs->constants,  index, value);
        VTABLE_set_integer_keyed_int(interp, attrs->types, index, PFC_PMC);
    }


/*

=item C<INTVAL get_type(INTVAL index)>

Get the type of the specified constant.  Possible type IDs:

=over 4

=item 0x00 - No constant

=item 0x6E - Number constant

=item 0x73 - String constant

=item 0x70 - PMC constant

=item 0x6B - Key constant

=back

=cut

*/
    METHOD get_type(INTVAL index) {
        INTVAL rv = VTABLE_get_integer_keyed_int(interp,
                PARROT_PACKFILECONSTANTTABLE(SELF)->types, index);
        RETURN(INTVAL rv);
    }


}
/*

=back

=cut

*/

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
