/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id: tqueue.pmc 11501 2006-02-10 18:27:13Z particle $

=head1 NAME

XXX

=head1 DESCRIPTION

XXX

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"

#include "parrot/stm/backend.h"

#include <assert.h>

pmclass STMVar is_shared {

/*

=item C<void init()>

...

=cut

*/
    void init() {
        PMC_struct_val(SELF) = Parrot_STM_alloc(INTERP, PMCNULL);
        PObj_custom_mark_SET(SELF);
    }

    void init_pmc(PMC* value) {
        if (   value->vtable->base_type == enum_class_STMRef
            || value->vtable->base_type == enum_class_STMVar) {
            PMC_struct_val(SELF) = PMC_struct_val(value);
        } else {
            PMC_struct_val(SELF) = Parrot_STM_alloc(INTERP, value);
        }
        PObj_custom_mark_SET(SELF);
    }
/*

=item C<PMC *clone()>

...

=cut

*/

    PMC* clone() {
        /* XXX fake a shared PMC */
        return SELF;
    }

/*

=item C<void mark()>

...

=cut

*/

    void mark () {
        Parrot_STM_mark_pmc_handle(INTERP, PMC_struct_val(SELF));
    }

/*

=item C<void destroy()>

...

=cut

*/

    void destroy () {
        /* XXX */
    }

    METHOD PMC* get_read() {
        return Parrot_STM_read(INTERP, PMC_struct_val(SELF));
    }

    METHOD PMC* get_update() {
        return Parrot_STM_begin_update(INTERP, PMC_struct_val(SELF));
    }

    METHOD void set(PMC* new_value) {
        Parrot_STM_write(INTERP, PMC_struct_val(SELF), new_value);
    }
}

/*

=back

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
