/*
 * $Id$
** stack.ops
*/

VERSION = PARROT_VERSION;

=head1 NAME

stack.ops - Stack Ops

=head1 DESCRIPTION

Operations that manipulate Parrot's register and user stacks.

=cut

###############################################################################

=head2 Register stack operations

These operations affect entire sets of registers.

=over 4

=cut

########################################

=item B<saveall>()

Save all of the registers onto the register stack.

=item B<restoreall>()

Restore all the registers from the register stack.

=cut

inline op saveall() :base_core {
  Parrot_push_regs(interp);
  /* these 2 opcodes change the register base pointer
   * restart NEXT() reloads cached base pointers, and works with
   * arbitrary branch opcodes too. While it's a bit of overkill,
   * we don't have an opcode annotation to reload just the base pointers
   * RT#42369 OPTIMIZE later
   */
  restart NEXT();
}

inline op restoreall() :base_core {
  Parrot_pop_regs(interp);
  restart NEXT();
}

=back

=cut

###############################################################################

=head1 COPYRIGHT

Copyright (C) 2001-2008, The Perl Foundation.

=head1 LICENSE

This program is free software. It is subject to the same license
as the Parrot interpreter itself.

=cut

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
