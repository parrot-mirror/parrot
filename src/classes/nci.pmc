/*
Copyright: 2001-2003 The Perl Foundation.  All Rights Reserved.
$Id$

=head1 NAME

src/classes/nci.pmc - Native Call Interface

=head1 DESCRIPTION

The vtable functions for the native C call functions.

Invoking an NCI function changes some registers according to PDD 3.

The caller has to preserve registers if needed.

=head2 Methods

=over 4

=cut

*/

#include "parrot/parrot.h"
#include "parrot/method_util.h"

pmclass NCI need_ext {

/*

=item C<void init()>

Initializes the NCI with a C<NULL> function pointer.

=cut

*/

    void init() {
        PMC_struct_val(SELF) = NULL;
        PMC_pmc_val(SELF) = NULL;
    }

/*

=item C<void set_pointer_keyed_str(STRING *key, void *func)>

Sets the specified function pointer and signature (C<*key>).

=cut

*/

    void set_pointer_keyed_str(STRING *key, void *func) {
        /* key = signature */

	nci_vtable_ptr->nci_free (INTERP, SELF);

        nci_vtable_ptr->nci_new (INTERP, SELF, key, func);
    }

/*

=item C<void destroy()>

Destroys the NCI, freeing any allocated memory.

=cut

*/

    void destroy() {
      nci_vtable_ptr->nci_free (INTERP, SELF);
    }

/*

=item C<PMC *clone()>

Creates and returns a clone of the NCI.

=cut

*/

    PMC* clone () {
        PMC* ret = pmc_new_noinit(INTERP, SELF->vtable->base_type);
        nci_vtable_ptr->nci_clone (INTERP, ret, SELF);        
        PObj_get_FLAGS(ret) |= (PObj_get_FLAGS(SELF) & 0x3);

        return ret;
    }

/*

=item C<INTVAL defined()>

Returns whether the NCI is defined.

=cut

*/

    INTVAL defined () {
        return PMC_struct_val(SELF) != NULL;
    }

/*

=item C<void *invoke(void *next)>

Calls the associated C function, returning C<*next>. If
the invocant is a class, the PMC arguments are
shifted down.

=cut

*/

    void* invoke (void * next) {

        INTERP->current_cont = NULL;

        /*
         * If the invocant is a class or there is no invocant
         * shift down arguments.
         * But not if it's a plain NCI function created
         * from dlfunc.
         *
         * NCI flags:
         *   private0 ... builtin multi method
         *   private1 ... created via dlfunc
         *
         */

        nci_vtable_ptr->nci_invoke (INTERP, SELF);

        return next;
    }

/*

=item C<INTVAL get_integer()>

Returns the function pointer as an integer.

=cut

*/

    INTVAL get_integer () {
        return((INTVAL)PMC_data(SELF));
    }

/*

=item C<INTVAL get_bool()>

Returns the boolean value of the pointer.

=cut

*/

    INTVAL get_bool () {
        return(0 != (INTVAL)PMC_data(SELF));
    }

}

/*

=back

=head1 SEE ALSO

F<docs/pdds/pdd03_calling_conventions.pod>.

=head1 HISTORY

Initial revision by sean 2002/08/04.

=cut

*/

/*
 * Local variables:
 * c-indentation-style: bsd
 * c-basic-offset: 4
 * indent-tabs-mode: nil
 * End:
 *
 * vim: expandtab shiftwidth=4:
*/
