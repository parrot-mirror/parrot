# Copyright (C) 2007, The Perl Foundation.
# $Id$

## exponentiation
proto infix:<**> is precedence('w=') { ... }

## symbolic unary
proto prefix:<+> is precedence('v=') { ... }
proto prefix:<-> is equiv(prefix:<+>) { ... }

## multiplicative operators
proto infix:<*> is precedence('u=')
    is pirop('n_mul')
    { ... }
proto infix:</> is equiv(infix:<*>)
    is pirop('n_div')
    { ... }
proto infix:<%> is equiv(infix:<*>)
    is pirop('n_mod')
    { ... }
proto infix:<+&> is equiv(infix:<*>) { ... }
proto infix:«+<» is equiv(infix:<*>) { ... }
proto infix:«+>» is equiv(infix:<*>) { ... }
proto infix:<~&> is equiv(infix:<*>) { ... }
proto infix:«~<» is equiv(infix:<*>) { ... }
proto infix:«~>» is equiv(infix:<*>) { ... }
proto infix:<?&> is equiv(infix:<*>) { ... }
proto infix:<div> is equiv(infix:<*>) { ... }
proto infix:<mod> is equiv(infix:<*>) { ... }

## additive operators
proto infix:<+> is precedence('t=')
    is pirop('n_add')
    { ... }
proto infix:<-> is equiv(infix:<+>)
    is pirop('n_sub')
    { ... }
proto infix:<+|> is equiv(infix:<+>) { ... }
proto infix:<+^> is equiv(infix:<+>) { ... }
proto infix:<~|> is equiv(infix:<+>) { ... }
proto infix:<~^> is equiv(infix:<+>) { ... }
proto infix:<?|> is equiv(infix:<+>) { ... }
proto infix:<?^> is equiv(infix:<+>) { ... }

## chaining
proto infix:<==> is precedence('m=') { ... }
proto infix:<!=> is equiv(infix:<==>) { ... }
proto infix:«<» is equiv(infix:<==>) { ... }
proto infix:«<=» is equiv(infix:<==>) { ... }
proto infix:«>» is equiv(infix:<==>) { ... }
proto infix:«>=» is equiv(infix:<==>) { ... }
proto infix:<eq> is equiv(infix:<==>) { ... }
proto infix:<ne> is equiv(infix:<==>) { ... }
proto infix:<lt> is equiv(infix:<==>) { ... }
proto infix:<le> is equiv(infix:<==>) { ... }
proto infix:<gt> is equiv(infix:<==>) { ... }
proto infix:<ge> is equiv(infix:<==>) { ... }
proto infix:<~~> is equiv(infix:<==>) { ... }
proto infix:<===> is equiv(infix:<==>) { ... }
proto infix:<eqv> is equiv(infix:<==>) { ... }
proto infix:<!eqv> is equiv(infix:<==>) { ... }

## tight and
proto infix:<&&> is precedence('l=')
    is pasttype('if')
    { ... }

## tight or
proto infix:<||> is precedence('k=')
    is pasttype('unless')
    { ... }
proto infix:<^^> is equiv(infix:<||>)
    is pasttype('xor')
    { ... }
proto infix:<//> is equiv(infix:<||>) { ... }
proto infix:<min> is equiv(infix:<||>) { ... }
proto infix:<max> is equiv(infix:<||>) { ... }

## comma
proto infix:<,> is precedence('g=')
    is assoc('list')
    { ... }

## loose and
proto infix:<and> is precedence('d=')
    is pasttype('if')
    { ... }
proto infix:<andthen> is equiv(infix:<and>) { ... }

## loose or
proto infix:<or> is precedence('c=')
    is pasttype('unless')
    { ... }
proto infix:<xor> is equiv(infix:<or>)
    is pasttype('xor')
    { ... }
proto infix:<orelse> is equiv(infix:<or>) { ... }
