## TODO: generate/fix the opcodes from the vmspec
## The vmspec is in html or pdf form at java.sun.com, or in 
## the KAFFE sources kaffevm/bytecode.h

# --------already converted to jvm------------

## UNCHECKED ARITHMETIC AND LOGICAL OPERATIONS

[iadd]
code = 60
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK0} + ${STACK1}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[ladd]
code = 61
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK0} + ${STACK1}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[fadd]
code = 62
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK0} + ${STACK1}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

# 3.8.3 Value Set Conversion
[dadd]
code = 63
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK0} + ${STACK1}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[isub]
code = 64
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} - ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[lsub]
code = 65
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} - ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[fsub]
code = 66
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} - ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[dsub]
code = 67
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} - ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[imul]
code = 68
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} * ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[lmul]
code = 69
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} * ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[fmul]
code = 6A
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} * ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[dmul]
code = 6B
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} * ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[idiv]
code = 6C
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} / ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[ldiv]
code = 6D
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} / ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[fdiv]
code = 6E
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} / ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[ddiv]
code = 6F
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} / ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

#[div.un]
#code = 5C
#class = op
#pop = 2
#push = 1
#instruction = net_div_un ${DEST0}, ${STACK1}, ${STACK0}
#typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[irem]
code = 70
class = op
pop = 2
push = 1
instruction = ${DEST0} = cmod ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[lrem]
code = 71
class = op
pop = 2
push = 1
instruction = ${DEST0} = cmod ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[frem]
code = 72
class = op
pop = 2
push = 1
instruction = ${DEST0} = cmod ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[drem]
code = 73
class = op
pop = 2
push = 1
instruction = ${DEST0} = cmod ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

#[rem.un]
#code = 5E
#class = op
#pop = 2
#push = 1
#instruction = net_rem_un ${DEST0}, ${STACK1}, ${STACK0}
#typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[ineg]
code = 74
class = op
pop = 1
push = 1
instruction = ${DEST0} = neg ${STACK0}
typeinfo = <<PIR
# Output type is same as input type.
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 1
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[lneg]
code = 75
class = op
pop = 1
push = 1
instruction = ${DEST0} = neg ${STACK0}
typeinfo = <<PIR
# Output type is same as input type.
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 1
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[fneg]
code = 76
class = op
pop = 1
push = 1
instruction = ${DEST0} = neg ${STACK0}
typeinfo = <<PIR
# Output type is same as input type.
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 1
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[dneg]
code = 77
class = op
pop = 1
push = 1
instruction = ${DEST0} = neg ${STACK0}
typeinfo = <<PIR
# Output type is same as input type.
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 1
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[ishl]
code = 78
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} << ${STACK0}
typeinfo = <<PIR
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 2
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[lshl]
code = 79
class = op
pop = 2
push = 1
instruction = ${DEST0} = ${STACK1} << ${STACK0}
typeinfo = <<PIR
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 2
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[ishr]
code = 7A
class = op
pop = 2
push = 1
instruction = ${DEST0} = lsr ${STACK1}, ${STACK0}
typeinfo = <<PIR
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 2
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[lshr]
code = 7B
class = op
pop = 2
push = 1
instruction = ${DEST0} = lsr ${STACK1}, ${STACK0}
typeinfo = <<PIR
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 2
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[iushr]
code = 7C
class = op
pop = 2
push = 1
instruction = ${DEST0} = shr ${STACK1}, ${STACK0}
typeinfo = <<PIR
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 2
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[lushr]
code = 7D
class = op
pop = 2
push = 1
instruction = ${DEST0} = shr ${STACK1}, ${STACK0}
typeinfo = <<PIR
${ITEMP0} = elements ${STYPES}
${ITEMP0} -= 2
${PTEMP0} = ${STYPES}[${ITEMP0}]
${DTYPES}[0] = ${PTEMP0}
PIR

[iand]
code = 7E
class = op
pop = 2
push = 1
instruction = ${DEST0} = band ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[land]
code = 7F
class = op
pop = 2
push = 1
instruction = ${DEST0} = band ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[ior]
code = 80
class = op
pop = 2
push = 1
instruction = ${DEST0} = bor ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[lor]
code = 81
class = op
pop = 2
push = 1
instruction = ${DEST0} = bor ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[ixor]
code = 82
class = op
pop = 2
push = 1
instruction = ${DEST0} = bxor ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

[lxor]
code = 83
class = op
pop = 2
push = 1
instruction = ${DEST0} = bxor ${STACK1}, ${STACK0}
typeinfo = typeinfo_bin_num_op(${STYPES}, ${DTYPES})

# Increment local variable by constant (local variable by index on thread-local stack frame)
# iinc index const
[iinc]
code = 84
class = op
arguments = uint8, int8
pir = <<PIR
${STEMP0} = ${ARG0}
${INS} = concat "inc local"
${INS} = concat ${STEMP0}
${INS} = concat "\n"
PIR
#typeinfo = ${LOADTYPE} = ${LTYPES}[0]
typeinfo = #

# store reference into local variable
[astore]
code = 3A
class = op
pop = 1
arguments = uint8
# TODO: fix concat_s_i or concat_s_p problem
#pir = <<PIR
#${INS} = concat "local"
#${INS} = concat ${ITEMP0}
#${INS} = concat " = "
#${INS} = concat ${STEMP0}
#${INS} = concat "\n"
#PIR
instruction = ${PTEMP0}[${ARG0}] = ${STACK0}
typeinfo = # Nothing to do

# store reference into local variable
[astore_0]
code = 4B
class = op
pop = 1
instruction = ${PTEMP0}[0] = ${STACK0}
typeinfo = # Nothing to do

[astore_1]
code = 4C
class = op
pop = 1
instruction = ${PTEMP0}[1] = ${STACK0}
typeinfo = # Nothing to do

[astore_2]
code = 4D
class = op
pop = 1
instruction = ${PTEMP0}[2] = ${STACK0}
typeinfo = # Nothing to do

[astore_3]
code = 4E
class = op
pop = 1
instruction = ${PTEMP0}[3] = ${STACK0}
typeinfo = # Nothing to do

[athrow]
code = BF
class = op
pop = 1
instruction = <<INS
$P1000000 = new .Exception
$P1000000["obj"] = ${STACK0}
throw $P1000000
INS
typeinfo = # None

[endfinally]
code = DC
class = op
pir = <<PIR
${STEMP0} = endfinally_code(${ASSEMBLY}, ${EHANDLERS}, ${PC})
${INS} = concat ${STEMP0}
PIR
typeinfo = # None

# -------- not yet converted to jvm------------
