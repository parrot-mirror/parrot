/*
 * $Id$
 * Copyright (C) 2006-2008, The Perl Foundation.
 */

#ifndef PARROT_JAVA_PMC_STRUCTURES_H_GUARD
#define PARROT_JAVA_PMC_STRUCTURES_H_GUARD

/* Some structures relating to the Java files and metadata PMCs. */

#define JAVA_CLASSFILE_MAGIC              0xCAFEBABE
#define JAVA_MIN_SUPPORTED_VERSION        45
#define JAVA_MAX_SUPPORTED_VERSION        49
#define JAVA_MAX_SUPPORTED_MINOR_VERSION  0

/* See also jvm.h */

/* Constants in class files */

#define JVM_ACC_PUBLIC        0x0001  /* visible to everyone */
#define JVM_ACC_PRIVATE       0x0002  /* visible only to the defining class */
#define JVM_ACC_PROTECTED     0x0004  /* visible to subclasses */
#define JVM_ACC_STATIC        0x0008  /* instance variable is static */
#define JVM_ACC_FINAL         0x0010  /* no further subclassing, overriding */
#define JVM_ACC_SYNCHRONIZED  0x0020  /* wrap method call in monitor lock */
#define JVM_ACC_SUPER         0x0020  /* funky handling of invokespecial */
#define JVM_ACC_VOLATILE      0x0040  /* can not cache in registers */
#define JVM_ACC_BRIDGE        0x0040  /* bridge method generated by compiler */
#define JVM_ACC_TRANSIENT     0x0080  /* not persistent */
#define JVM_ACC_VARARGS       0x0080  /* method declared with variable number of args */
#define JVM_ACC_NATIVE        0x0100  /* implemented in C */
#define JVM_ACC_INTERFACE     0x0200  /* class is an interface */
#define JVM_ACC_ABSTRACT      0x0400  /* no definition provided */
#define JVM_ACC_STRICT	      0x0800  /* strict floating point */
#define JVM_ACC_SYNTHETIC     0x1000  /* compiler-generated class, method or field */
#define JVM_ACC_ANNOTATION    0x2000  /* annotation type */
#define JVM_ACC_ENUM          0x4000  /* field is declared as element of enum */

#define JVM_ACC_PUBLIC_BIT        0
#define JVM_ACC_PRIVATE_BIT       1
#define JVM_ACC_PROTECTED_BIT     2
#define JVM_ACC_STATIC_BIT        3
#define JVM_ACC_FINAL_BIT         4
#define JVM_ACC_SYNCHRONIZED_BIT  5
#define JVM_ACC_SUPER_BIT         5
#define JVM_ACC_VOLATILE_BIT      6
#define JVM_ACC_BRIDGE_BIT        6
#define JVM_ACC_TRANSIENT_BIT     7
#define JVM_ACC_VARARGS_BIT       7
#define JVM_ACC_NATIVE_BIT        8
#define JVM_ACC_INTERFACE_BIT     9
#define JVM_ACC_ABSTRACT_BIT      10
#define JVM_ACC_STRICT_BIT	  11
#define JVM_ACC_SYNTHETIC_BIT     12
#define JVM_ACC_ANNOTATION_BIT	  13
#define JVM_ACC_ENUM_BIT          14

// NOTE: replicated in SA in vm/agent/sun/jvm/hotspot/utilities/ConstantTag.java
enum {
    JVM_CONSTANT_Utf8 = 1,
    JVM_CONSTANT_Unicode,		/* unused */
    JVM_CONSTANT_Integer,
    JVM_CONSTANT_Float,
    JVM_CONSTANT_Long,      
    JVM_CONSTANT_Double,
    JVM_CONSTANT_Class,
    JVM_CONSTANT_String,
    JVM_CONSTANT_Fieldref,
    JVM_CONSTANT_Methodref,
    JVM_CONSTANT_InterfaceMethodref,
    JVM_CONSTANT_NameAndType
};

/* Used in the newarray instruction. */

#define JVM_T_BOOLEAN 4
#define JVM_T_CHAR    5
#define JVM_T_FLOAT   6
#define JVM_T_DOUBLE  7
#define JVM_T_BYTE    8
#define JVM_T_SHORT   9
#define JVM_T_INT    10
#define JVM_T_LONG   11

/* JVM method signatures */

#define JVM_SIGNATURE_ARRAY		'['
#define JVM_SIGNATURE_BYTE		'B'
#define JVM_SIGNATURE_CHAR		'C'
#define JVM_SIGNATURE_CLASS		'L'
#define JVM_SIGNATURE_ENDCLASS	        ';'
#define JVM_SIGNATURE_ENUM		'E'
#define JVM_SIGNATURE_FLOAT		'F'
#define JVM_SIGNATURE_DOUBLE            'D'
#define JVM_SIGNATURE_FUNC		'('
#define JVM_SIGNATURE_ENDFUNC	        ')'
#define JVM_SIGNATURE_INT		'I'
#define JVM_SIGNATURE_LONG		'J'
#define JVM_SIGNATURE_SHORT		'S'
#define JVM_SIGNATURE_VOID		'V'
#define JVM_SIGNATURE_BOOLEAN	        'Z' 

#define JVM_RECOGNIZED_CLASS_MODIFIERS (JVM_ACC_PUBLIC | \
					JVM_ACC_FINAL | \
					JVM_ACC_SUPER | \
					JVM_ACC_INTERFACE | \
					JVM_ACC_ABSTRACT | \
					JVM_ACC_ANNOTATION | \
					JVM_ACC_SYNTHETIC)
       
#define JVM_RECOGNIZED_FIELD_MODIFIERS (JVM_ACC_PUBLIC | \
					JVM_ACC_PRIVATE | \
					JVM_ACC_PROTECTED | \
					JVM_ACC_STATIC | \
					JVM_ACC_FINAL | \
					JVM_ACC_VOLATILE | \
					JVM_ACC_TRANSIENT | \
					JVM_ACC_ENUM | \
					JVM_ACC_SYNTHETIC)

#define JVM_RECOGNIZED_METHOD_MODIFIERS (JVM_ACC_PUBLIC | \
					 JVM_ACC_PRIVATE | \
					 JVM_ACC_PROTECTED | \
					 JVM_ACC_STATIC | \
					 JVM_ACC_FINAL | \
					 JVM_ACC_SYNCHRONIZED | \
					 JVM_ACC_BRIDGE | \
					 JVM_ACC_VARARGS | \
					 JVM_ACC_NATIVE | \
					 JVM_ACC_ABSTRACT | \
					 JVM_ACC_STRICT | \
					 JVM_ACC_SYNTHETIC) 

/* See http://jcp.org/aboutJava/communityprocess/final/jsr202/index.html */

/*
 * Support for a VM-independent class format checker.
 */ 
typedef struct {
    unsigned long code;    /* byte code */
    unsigned long excs;    /* exceptions */
    unsigned long etab;    /* catch table */
    unsigned long lnum;    /* line number */
    unsigned long lvar;    /* local vars */
} method_size_info;

typedef struct {
    unsigned int constants;    /* constant pool */
    unsigned int fields;
    unsigned int methods;
    unsigned int interfaces;
    unsigned int fields2;      /* number of static 2-word fields */
    unsigned int innerclasses; /* # of records in InnerClasses attr */

    method_size_info clinit;   /* memory used in clinit */
    method_size_info main;     /* used everywhere else */
} class_size_info;

typedef struct java6_ClassFile {
    Parrot_UInt4 magic;             /* 0xCAFEBABE */
    Parrot_UInt2 minor_version;
    Parrot_UInt2 major_version;
    Parrot_UInt2 constant_pool_count;
#ifdef TODO
    cp_info      *constant_pool; /* [constant_pool_count-1] */
#endif
    Parrot_UInt2 access_flags;
    Parrot_UInt2 this_class;
    Parrot_UInt2 super_class;
    Parrot_UInt2 interfaces_count;
    Parrot_UInt2 *interfaces;
    Parrot_UInt2 fields_count;
#ifdef TODO
    field_info   *fields;
#endif
    Parrot_UInt2 methods_count;
#ifdef TODO
    method_info  *methods;
#endif
    Parrot_UInt2 attributes_count;
#ifdef TODO
    attribute_info *attributes;
#endif
} java6_ClassFile;

#ifdef TODO
enum Tag {
  ITEM_Bogus,             /*  Unused  */
  ITEM_Integer,
  ITEM_Float,
  ITEM_Double,
  ITEM_Long,
  ITEM_Null,              /*  Result of aconst_null  */
  ITEM_UninitializedThis, /*  "this" is in <init> method, before call to super()  */
  ITEM_Object,
  ITEM_Uninitialized,
};

/*  JDK 1.3 version */
typedef struct real_jzentry13 { 	/* Zip file entry */
    char *name;	  	  	/* entry name */
    int time;            	/* modification time */
    int size;	  	  	/* size of uncompressed data */
    int csize;  	  	/* size of compressed data (zero if uncompressed) */
    int crc;		  	/* crc of uncompressed data */
    char *comment;	  	/* optional zip file comment */
    char *extra;	  	/* optional extra data */
    int pos;	  	  	/* position of LOC header (if negative) or data */
} real_jzentry13;

typedef struct real_jzfile13 {  /* Zip file */
    char *name;	  	        /* zip file name */
    int refs;		        /* number of active references */
    int fd;		        /* open file descriptor */
    void *lock;		        /* read lock */
    char *comment; 	        /* zip file comment */
    char *msg;		        /* zip error message */
    void *entries;          	/* array of hash cells */
    int total;	  	        /* total number of entries */
    unsigned short *table;      /* Hash chain heads: indexes into entries */
    int tablelen;	        /* number of hash eads */
    real_jzfile13 *next;        /* next zip file in search list */
    jzentry *cache;             /* we cache the most recently freed jzentry */
    /* Information on metadata names in META-INF directory */
    char **metanames;           /* array of meta names (may have null names) */
    int metacount;	        /* number of slots in metanames array */
    /* If there are any per-entry comments, they are in the comments array */
    char **comments;
} real_jzfile13;

/*  JDK 1.2 version */
typedef struct real_jzentry12 {  /* Zip file entry */
    char *name;                  /* entry name */
    int time;                   /* modification time */
    int size;                   /* size of uncompressed data */
    int csize;                  /* size of compressed data (zero if uncompressed) */
    int crc;                    /* crc of uncompressed data */
    char *comment;               /* optional zip file comment */
    char *extra;                /* optional extra data */
    int pos;                    /* position of LOC header (if negative) or data */
    struct real_jzentry12 *next; /* next entry in hash table */
} real_jzentry12;

typedef jzfile void;
typedef struct real_jzfile12 {  /* Zip file */
    char *name;                 /* zip file name */
    int refs;                  /* number of active references */
    int fd;                    /* open file descriptor */
    void *lock;                 /* read lock */
    char *comment;              /* zip file comment */
    char *msg;                  /* zip error message */
    real_jzentry12 *entries;    /* array of zip entries */
    int total;                 /* total number of entries */
    real_jzentry12 **table;     /* hash table of entries */
    int tablelen;              /* number of buckets */
    jzfile *next;               /* next zip file in search list */
} real_jzfile12;

#endif

/* This structure describes a loaded Java class file */
typedef struct jvm_classfile {
    /* Details that the user of the PMC may be interested in. */
    STRING *filename;
    int is_jar;
    Parrot_UInt4 entry_point;

    /* Heaps and tables pointers, sizes and pointer sizes if needed. */
    char *strings;
    Parrot_UInt4 strings_size;
    Parrot_UInt4 strings_ptr_size;
    char *user_strings;
    Parrot_UInt4 user_strings_size;
    char *blobs;
    Parrot_UInt4 blobs_size;
    Parrot_UInt4 blobs_ptr_size;
    char *tables;
    Parrot_UInt4 tables_size;
    Parrot_UInt4 guid_ptr_size;

    /* Table info. */
    Parrot_UInt4 valid_hi;
    Parrot_UInt4 valid_lo;
    Parrot_UInt4 positions[MAX_TABLE];
    Parrot_UInt4 rows[MAX_TABLE];

    /* Globals PMC and classes PMC array. */
    PMC *globals;
    PMC *classes;
    PMC *class_order;

    /* Field and method tables pointing to field and method PMCs. */
    PMC *fields;
    PMC *methods;

    /* Linkage related PMCs. */
    PMC *typerefs;
    PMC *memberrefs;
    PMC *assemblyrefs;

    /* Internal stuff relating to PE headers. */
/*
    Parrot_UInt2 pe_sections;
    int pe_sections_pos;
    Parrot_UInt4 rva_code;
    Parrot_UInt4 rva_data;
*/
    /* Flag indicating if the file has been loaded. */
    int loaded;
} jvm_classfile;


/* This structure describes a reference to another jar file. */
typedef struct jvm_classfileref {
    /* Version. */
    Parrot_UInt2 version_major;
    Parrot_UInt2 version_minor;
    Parrot_UInt2 version_build;
    Parrot_UInt2 version_revision;

    /* Info about the assembly and its author. */
    Parrot_UInt4 flags;
    Parrot_UInt4 public_key;
    STRING *str_name;
    STRING *str_culture;
    Parrot_UInt4 hash_value;
} jvm_classfileref;

/* This structure describes a Java class. */
typedef struct jvm_class {
    /* Pointer to the assembly PMC the class belongs to. */
    PMC *parent;

    /* Position in heaps for name, namespace and signature. */
    STRING *str_name;
    STRING *str_namespace;
    STRING *str_fullname;

    /* Arrays of fields and methods. */
    PMC *fields;
    PMC *methods;

    /* Flags. */
    Parrot_UInt4 flags;

    /* Parent. */
    Parrot_UInt4 parent_type;
    Parrot_UInt4 parent_id;

    /* Interfaces. */
    PMC *interface_types;
    PMC *interface_ids;
} jvm_class;


/* This structure describes a Java method. */
typedef struct jvm_method {
    /* Pointer to the class PMC the method belongs to. */
    PMC *parent;

    /* Name. signature blob position and parameter array. */
    STRING *str_name;
    Parrot_UInt4 signature;
    PMC *params;

    /* Bytecode. */
    PMC *bytecode;

    /* Some flags. */
    Parrot_UInt2 implFlags;
    Parrot_UInt2 flags;
} jvm_method;


/* This structure describes a Java field. */
typedef struct jvm_field {
    /* Pointer to the class PMC the field belongs to. */
    PMC *parent;

    /* Name and signature blob position. */
    STRING *str_name;
    Parrot_UInt4 signature;

    /* Flags. */
    Parrot_UInt2 flags;
} jvm_field;


/* This structure describes a Java member reference. */
typedef struct jvm_memberref {
    /* Name and signature blob position. */
    STRING *str_name;
    Parrot_UInt4 signature;

    /* Class (which could be a method def or many other things) */
    Parrot_UInt4 class_type;
    Parrot_UInt4 class_id;
} jvm_memberref;


/* This structure describes a Java parameter. */
typedef struct jvm_param {
    /* Pointer to the method PMC the parameter belongs to. */
    PMC *parent;

    /* Name. */
    STRING *str_name;

    /* Flags and sequence number. */
    Parrot_UInt2 flags;
    Parrot_UInt2 sequence;
} jvm_param;


/* This structure describes a chunk of Java bytecode. */
typedef struct jvm_bytecode {
    /* Pointer to the method PMC the field belongs to. */
    PMC *parent;

    /* Locals signature blob position. */
    Parrot_UInt4 locals_signature;

    /* Method body and it's size. */
    char *body;
    Parrot_UInt4 body_size;

    /* Bytecode walking data. */
    Parrot_UInt4 cur_pos;

    /* Init locals flag. */
    Parrot_UInt2 init_locals_flag;

    /* Array of JavaEH (Exception Handlers). */
    PMC *eh;
} jvm_bytecode;


/* This structure describes a Java exception handler. */
typedef struct jvm_eh {
    /* Pointer to the method PMC the handler belongs to. */
    PMC *parent;

    /* Try block offset and length. */
    Parrot_UInt4 try_offset;
    Parrot_UInt4 try_length;

    /* Handler block offset and length. */
    Parrot_UInt4 handler_offset;
    Parrot_UInt4 handler_length;

    /* Flags and stuff specific to certain handler types. */
    Parrot_UInt4 flags;
    Parrot_UInt4 class_type;
    Parrot_UInt4 class_id;
    Parrot_UInt4 filter_offset;
} jvm_eh;


/* This structure describes a Java signature. */
typedef struct jvm_signature {
    /* Stream of bytes that makes up the signature and its length. */
    char *data;
    int data_size;

    /* Current position we're at while walking the sig. */
    int cur_pos;
} jvm_signature;


/* This structure describes a reference to a type in another file. */
typedef struct jvm_typeref {
    /* Position in heaps for name and namespace. */
    STRING *str_name;
    STRING *str_namespace;

    /* Resolution scope (basically, what module do we find the type in). */
    Parrot_UInt4 resolution_scope;
} jvm_typeref;


/* Enums and structure relating to the managed pointer PMC. */
/* Some enumerations. */
typedef enum jvm_managed_ptr_type {
    PTR_TYPE_REGISTER,
    PTR_TYPE_FIELD,
    PTR_TYPE_ELEMENT,
    PTR_TYPE_PMC
} Dotnet_Ptr_Type;
typedef enum jvm_managed_ptr_reg_type {
    PTR_REGTYPE_I,
    PTR_REGTYPE_N,
    PTR_REGTYPE_S,
    PTR_REGTYPE_P
} Dotnet_Reg_Type;

/* Register info. */
typedef struct reg_info {
    Dotnet_Reg_Type reg_type;
    int number;
} reg_info;

/* Underlying struct for the PMC. */
typedef struct jvm_managed_ptr {
    Dotnet_Ptr_Type type;
    union {
        PMC* pmc;              /* For arrays, fields and PMCs. */
        parrot_context_t *ctx; /* For registers. */
    };
    union {
        int index;             /* For arrays. */
        STRING *name;          /* For field name. */
        reg_info r;            /* For registers. */
    };
} jvm_managed_ptr;


/* Int64 and UInt64 PMC underlying structs. */
typedef struct jvm_int64 {
    HUGEINTVAL x;
} jvm_int64;

typedef struct jvm_uint64 {
    UHUGEINTVAL x;
} jvm_uint64;

#endif /* PARROT_JAVA_PMC_STRUCTURES_H_GUARD */

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
