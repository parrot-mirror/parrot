# $Id$
package Parrot::Manifest::Files;
use strict;
use warnings;
use Carp;
use base ('Parrot::Manifest');

#sub prepare_manifest {
#    my $self = shift;
#    my $manifest_lines_ref = [];
#    
#    for my $file (@{ $self->{versioned_files} }) {
#    
#        # now get the manifest entry
#        $manifest_lines_ref = get_manifest_entry(
#            $file, $manifest_lines_ref
#        );
#    }
#    $self->{lines} = $manifest_lines_ref;
#}
#
#sub print_manifest {
#    my $self = shift;
#    open my $MANIFEST, '>', 'MANIFEST'
#        or die "Unable to open MANIFEST for writing";
#    print $MANIFEST <<"END_HEADER";
## ex: set ro:
## $self->{id}
##
## generated by $self->{script} $self->{time} UT
##
## See tools/dev/install_files.pl for documentation on the
## format of this file.
## See docs/submissions.pod on how to recreate this file after SVN
## has been told about new or deleted files.
#END_HEADER
#
#    print $MANIFEST $_ for ( sort @{ $self->{lines} } );
#    close $MANIFEST or die "Unable to close MANIFEST after writing";
#}
#
#sub get_manifest_entry {
#    my ($file, $manifest_lines_ref) = @_;
#    # XXX Most of these can probably be cleaned up
#    my %special = qw(
#        LICENSE                                         [main]doc
#        NEWS                                            [devel]doc
#        PBC_COMPAT                                      [devel]doc
#        PLATFORMS                                       [devel]doc
#        README                                          [devel]doc
#        README.win32.pod                                [devel]doc
#        README.win32.pod                                [devel]doc
#        RESPONSIBLE_PARTIES                             [main]doc
#        TODO                                            [main]doc
#        parrot-config                                   [main]bin
#        docs/ROADMAP.pod                                [devel]doc
#        docs/compiler_faq.pod                           [devel]doc
#        docs/configuration.pod                          [devel]doc
#        docs/debug.pod                                  [devel]doc
#        docs/dev/dod.pod                                [devel]doc
#        docs/dev/events.pod                             [devel]doc
#        docs/dev/fhs.pod                                [devel]doc
#        docs/dev/infant.pod                             [devel]doc
#        docs/dev/pmc_freeze.pod                         [devel]doc
#        examples/sdl/anim_image.pir                     [devel]
#        examples/sdl/anim_image_dblbuf.pir              [devel]
#        examples/sdl/blue_font.pir                      [devel]
#        examples/sdl/blue_rect.pir                      [devel]
#        examples/sdl/bounce_parrot_logo.pir             [devel]
#        examples/sdl/lcd/clock.pir                      [devel]
#        examples/sdl/move_parrot_logo.pir               [devel]
#        examples/sdl/parrot_small.png                   [devel]
#        examples/sdl/raw_pixels.pir                     [devel]
#        languages/t/harness                             []
#        runtime/parrot/dynext/README                    [devel]doc
#        runtime/parrot/include/DWIM.pir                 [devel]doc
#        runtime/parrot/include/README                   [devel]doc
#        src/call_list.txt                               [devel]doc
#        src/ops/ops.num                                 [devel]
#        tools/build/ops2c.pl                            [devel]
#        tools/build/ops2pm.pl                           [devel]
#        tools/build/pbc2c.pl                            [devel]
#        tools/build/revision_c.pl                       [devel]
#        vtable.tbl                                      [devel]
#    );
#    
#    my $loc  = '[]';
#    for ($file) {
#        $loc =
#              exists( $special{$_} ) ? $special{$_}
#            : !m[/]                  ? '[]'
#            : m[^LICENSES/]          ? '[main]doc'
#            : m[^docs/]              ? '[main]doc'
#            : m[^editor/]            ? '[devel]'
#            : m[^examples/]          ? '[main]doc'
#            : m[^include/]           ? '[main]include'
#            : ( m[^languages/(\w+)/] and $1 ne 'conversion' ) ? "[$1]"
#            : m[^lib/]        ? '[devel]'
#            : m[^runtime/]    ? '[library]'
#            : m[^tools/docs/] ? '[devel]'
#            : m[^tools/dev/]  ? '[devel]'
#            : m[^(apps/\w+)/] ? "[$1]"
#            :                   '[]';
#    }
#    push @{ $manifest_lines_ref }, sprintf( "%- 59s %s\n", $file, $loc );
#
#    return $manifest_lines_ref;
#}

1;

##### DOCUMENTATION #####

=head1 NAME

Parrot::Manifest::Files - Create MANIFEST

=head1 SYNOPSIS

    use Parrot::Manifest::Files;

    $mani = Parrot::Manifest::Files->new($0);
    $mani->prepare_manifest();
    $mani->print_manifest();

=head1 SEE ALSO

Parrot::Manifest, Parrot::Manifest::Files, 
F<tools/dev/mk_manifest_and_skip.pl>.

=head1 AUTHOR

James E. Keenan (jkeenan@cpan.org) refactored code from earlier versions of
F<tools/dev/mk_manifest_and_skip.pl>.

=head1 LICENSE

This is free software which you may distribute under the same terms as Perl
itself.

=cut
