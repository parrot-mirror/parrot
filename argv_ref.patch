Index: t/prove.t
===================================================================
--- t/prove.t	(revision 661)
+++ t/prove.t	(working copy)
@@ -1164,7 +1164,7 @@
 
     # Optionally parse command args
     if ( my $switches = $test->{switches} ) {
-        eval { $app->process_args(@$switches) };
+        eval { $app->process_args($switches) };
         if ( my $err_pattern = $test->{parse_error} ) {
             like $@, $err_pattern, "$name: expected parse error";
         }
Index: lib/App/Prove.pm
===================================================================
--- lib/App/Prove.pm	(revision 661)
+++ lib/App/Prove.pm	(working copy)
@@ -80,7 +80,7 @@
 
 =head3 C<process_args>
 
-  $prove->process_args(@args);
+  $prove->process_args(\@args);
 
 Processes the command-line arguments and stashes the remainders in the
 C<$self->{args}> array-ref.
@@ -90,19 +90,17 @@
 =cut
 
 sub process_args {
-    my ( $self, @args ) = @_;
+    my ( $self, $args ) = @_;
 
-    if ( my @bad = map {"-$_"} grep {/^-(man|help)$/} @args ) {
+    if ( my @bad = map {"-$_"} grep {/^-(man|help)$/} @${args} ) {
         die "Long options should be written with two dashes: ",
           join( ', ', @bad ), "\n";
     }
 
-    # Allow cuddling the paths with the -I
-    @args = map { /^(-I)(.+)/ ? ( $1, $2 ) : $_ } @args;
-
     {
         my $help_sub = sub { $self->_help; $self->_exit };
-        local @ARGV = @args;
+        # Allow cuddling the paths with the -I
+        local @ARGV = map { /^(-I)(.+)/ ? ( $1, $2 ) : $_ } @{$args};
         Getopt::Long::Configure( 'no_ignore_case', 'bundling' );
         GetOptions(
             'v|verbose'   => \$self->{verbose},
@@ -143,6 +141,7 @@
 
         # Stash the remainder of argv for later
         $self->{argv} = [@ARGV];
+        @{$args} = @ARGV;
     }
 }
 
Index: bin/prove
===================================================================
--- bin/prove	(revision 661)
+++ bin/prove	(working copy)
@@ -4,7 +4,7 @@
 use App::Prove;
 
 my $app = App::Prove->new;
-$app->process_args(@ARGV);
+$app->process_args(\@ARGV);
 $app->run;
 
 __END__
