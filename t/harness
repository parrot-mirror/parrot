#!perl
# Copyright (C) 2001-2007, The Perl Foundation.
# $Id$

=head1 NAME

t/harness - Parrot Test Harness

=head1 SYNOPSIS

    % perl t/harness [options] [testfiles]

=head1 DESCRIPTION

The short command line options are:

=over 4

=item C<-w>

Turn warnings on.

=item C<-g>

Run the C<CGoto> core.

=item C<-j>

Run with JIT enabled.

=item C<-C>

Run the C<CGP> core.

=item C<-S>

Run Switched.

=item C<-b>

Run bounds checking enabled.

=item C<-d>

Run with debugging enabled.

=item C<-f>

Run fast core.

=item C<-r>

compile to Parrot bytecode and then run the bytecode.

=item C<-O[012]>

Run optimized to the specified level.

=item C<-D[number]>

Pass the specified debug bits to the parrot interpreter.  Note that 
C<-D40> (fill I, N registers with garbage) is always enabled.  
See 'parrot --help-debug' for available flags.

=back

There are also long command line options:

=over 4

=item C<--running-make-test>

Some test scripts run more quickly when this is set.

=item C<--gc-debug>

Invoke parrot with '--gc-debug'.

=item C<--html>

Emit a C<smoke.html> file instead of displaying results.

=back

=cut


use strict;
use warnings;
use lib qw( . lib ../lib ../../lib );

use Getopt::Std;
use Test::Harness();
use Parrot::Harness::DefaultTests;
use Parrot::Harness::Smoke qw(
    get_test_prog_args
    generate_html_smoke_report
);

# handle the long options

$ENV{RUNNING_MAKE_TEST} = grep { $_ eq '--running-make-test' } @ARGV;
@ARGV = grep { $_ ne '--running-make-test' } @ARGV;

my $gc_debug = grep { $_ eq '--gc-debug' } @ARGV;
@ARGV = grep { $_ ne '--gc-debug' } @ARGV;

my $core_tests_only = grep { $_ eq '--core-tests' } @ARGV;
@ARGV = grep { $_ ne '--core-tests' } @ARGV;

my $runcore_tests_only = grep { $_ eq '--runcore-tests' } @ARGV;
@ARGV = grep { $_ ne '--runcore-tests' } @ARGV;

my $html = grep { $_ eq '--html' } @ARGV;
@ARGV = grep { $_ ne '--html' } @ARGV;

my $run_exec = grep { $_ eq '--run-exec' } @ARGV;
@ARGV = grep { $_ ne '--run-exec' } @ARGV;

my $use_test_run = grep { $_ eq '--tr' } @ARGV;
@ARGV = grep { $_ ne '--tr' } @ARGV;

$use_test_run ||= $ENV{'PARROT_USE_TEST_RUN'};

# Suck the short options into the TEST_PROG_ARGS evar:
my %opts;
getopts('wgjPCSefbvdr?hO:D:', \%opts);
if ($opts{'?'} || $opts{h}) {
    print <<"EOF";
perl t/harness [options] [testfiles]
    -w         ... warnings on
    -g         ... run CGoto
    -j         ... run JIT
    -C         ... run CGP
    -S         ... run Switched
    -b         ... run bounds checked
    --run-exec ... run exec core
    -f         ... run fast core
    -v         ... run verbose
    -d         ... run debug
    -r         ... assemble to PBC run PBC
    -O[012]    ... optimize
    -D[number] ... pass debug flags to parrot interpreter
    --running-make-test
    --gc-debug
    --core-tests
    --runcore-tests
    --html
    --tr       ... run using Test::Run
EOF
    exit;
}

# add -D40;  merge it with any existing -D argument
$opts{D} = sprintf( '%x', hex(40) | (exists $opts{D} ? hex($opts{D}) : 0));

#my $args = join(' ', map { "-$_" } keys %opts );
#$args =~ s/-O/-O$opts{O}/ if exists $opts{O};
#$args =~ s/-D/-D$opts{D}/;
#$args .= ' --gc-debug'    if $gc_debug;
## XXX find better way for passing run_exec to Parrot::Test
#$args .= ' --run-exec'    if $run_exec;
my $args = get_test_prog_args(\%opts, $gc_debug, $run_exec);
$ENV{TEST_PROG_ARGS} = $args;

# now build the list of tests to run, either from the command
# line or from @default tests
my @default_tests = get_default_tests(
    $core_tests_only,
    $runcore_tests_only
);

my @tests = map { glob( $_ ) } (@ARGV ? @ARGV : @default_tests);

if ($use_test_run) {
    require Test::Run::CmdLine::Iface;
    my $test_run =
        Test::Run::CmdLine::Iface->new(
            {
                'test_files' => [@tests],
            }   
            # 'backend_params' => $self->_get_backend_params(),
        );

    $test_run->run();
}
elsif (!$html) {
    Test::Harness::runtests(@tests);
} else {
    generate_html_smoke_report ( {
        tests       => \@tests,
        args        => $args,
        file        => 'smoke.html',
    } );
}

=head1 HISTORY

Mike Lambert stole F<t/harness> for F<languages/perl6/t/harness>.

Leo Toetsch stole F<languages/perl6/t/harness> for F<imcc/t/harness>.

Bernhard Schmalhofer merged F<imcc/t/harness> back into F<t/harness>.

=cut


# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
